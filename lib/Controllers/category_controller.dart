import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import '../Models/category_model.dart';
import '../Services/firestore_helper.dart';

class CategoryController extends ChangeNotifier {
  List<CategoryModel> _categories = [];
  StreamSubscription<QuerySnapshot>? _categorySubscription;
  static const List<String> _incomeCategoryLabels = ['Income', 'Salary'];
  static const List<String> _reservedCategoryLabels = ['More'];

  CategoryController() {
    _setupAuthListener();
  }

  List<CategoryModel> get categories => _categories;

  List<CategoryModel> get expenseCategories => _categories
      .where((category) => !_incomeCategoryLabels.contains(category.label))
      .toList();

  List<CategoryModel> get incomeCategories => _categories
      .where((category) => _incomeCategoryLabels.contains(category.label))
      .toList();

  void _setupAuthListener() {
    FirebaseAuth.instance.authStateChanges().listen((User? user) {
      if (user == null) {
        _clearState();
      } else {
        // Use FirestoreHelper to initialize categories
        FirestoreHelper.initializeCategories(user.uid).then((_) {
          _setupListeners(user.uid);
        });
      }
    });
  }

  void _clearState() {
    _categorySubscription?.cancel();
    _categorySubscription = null;
    _categories = [];
    notifyListeners();
  }

  void _setupListeners(String userId) {
    _categorySubscription?.cancel(); // Prevent duplicate listeners
    _categorySubscription = FirebaseFirestore.instance
        .collection('users')
        .doc(userId)
        .collection('categories')
        .snapshots()
        .listen((snapshot) {
      _categories =
          snapshot.docs.map((doc) => CategoryModel.fromFirestore(doc)).toList();
      notifyListeners();
    }, onError: (e) {
      debugPrint('Error listening to categories: $e');
    });
  }

  Future<void> addCategory(String name) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    // Prevent adding reserved categories
    if (_incomeCategoryLabels.contains(name) ||
        _reservedCategoryLabels.contains(name)) {
      debugPrint('Cannot add reserved category: $name');
      return;
    }

    final newCategory = CategoryModel(
      id: '', // ID will be auto-generated by Firestore
      label: name,
      icon: 'lib/assets/star.png', // Default icon for all new categories
    );

    // Let Firestore generate the document ID
    await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('categories')
        .add(newCategory.toFirestore());
  }

  Future<void> deleteCategory(String categoryId) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('categories')
        .doc(categoryId)
        .delete();
  }

  @override
  void dispose() {
    _categorySubscription?.cancel();
    super.dispose();
  }
}
